<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.i4.i4blog.repository.interfaces.admin.AdminRepository">
    <update id="userRoleUp">

        UPDATE user
        SET user_role = 0
        WHERE id = #{id}


    </update>

    <select id="dateCount" resultType="com.i4.i4blog.repository.model.admin.DateCountDTO">

        SELECT (SELECT CONCAT(FORMAT(COUNT(*), 0), '명') FROM user WHERE DATE(user_created_at) = CURDATE()) AS t_joined_user
             , (
        SELECT CONCAT( FORMAT( COUNT(*), 0), '명')
        FROM user
        WHERE DATE (user_created_at) = CURDATE() - INTERVAL 1 DAY) As y_joined_user

            , (
        SELECT CONCAT( FORMAT( COUNT(*), 0), '개')
        FROM board
        WHERE DATE (board_created_at) = CURDATE()) AS t_created_board
            , (
        SELECT CONCAT( FORMAT( COUNT(*), 0), '개')
        FROM board
        WHERE DATE (board_created_at) = CURDATE() - INTERVAL 1 DAY) AS y_created_board

            , (
        SELECT CONCAT( FORMAT( COUNT(*), 0), '개')
        FROM comment
        WHERE DATE (comment_created_at) = CURDATE()) AS t_created_comment
            , (
        SELECT CONCAT( FORMAT( COUNT(*), 0), '개')
        FROM comment
        WHERE DATE (comment_created_at) = CURDATE() - INTERVAL 1 DAY) AS y_created_comment
    </select>

    <resultMap id="adminReportVOMap" type="com.i4.i4blog.repository.model.admin.AdminReportVO">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="boardId" column="board_id"/>
        <result property="reportContent" column="report_content"/>
        <result property="reportType" column="report_type"/>
        <result property="reportDate" column="report_created_at"/>
        <result property="boardTitle" column="board_title"/>
        <result property="state" column="state"/>
        <result property="count" column="count"/>
        <result property="strUserId" column="str_user_id"></result>
    </resultMap>


    <select id="getReportList" resultMap="adminReportVOMap">
        <if test="type =='board'">
            SELECT r.id
            , r.user_id
            , r.board_id
            , r.report_content
            , r.report_type
            , r.report_created_at
            , b.board_title
            , u.user_id as str_user_id
            , (CASE
            WHEN b.board_state = 0 THEN '삭제된 게시글'
            WHEN b.board_state = 1 THEN '존재하는 게시글'
            ELSE 'error'
            END) as state
            , count(*) over (partition by r.board_id) as count
            FROM report r
            JOIN board b ON r.board_id = b.id
            JOIN user u ON b.user_id = u.id
            ORDER BY b.board_state desc
            <if test="orderBy == 'date'">

                , r.id desc

            </if>
            <if test="orderBy == 'count'">

                , count desc

            </if>

            <if test="orderBy == ''">

            </if>
            LIMIT #{offSET}, #{countPerPage}

        </if>
        <if test="type == 'comment'">

            SELECT r.id
            , r.user_id
            , b.id as board_id
            , r.comment_id
            , b.board_title
            , r.report_content
            , r.report_type
            , r.report_created_at
            , c.comment_content
            , u.user_id as str_user_id
            , (CASE
            WHEN c.comment_state = 0 THEN '삭제된 댓글'
            WHEN c.comment_State = 1 THEN '존재하는 댓글'
            ELSE 'error'
            END) as state
            , count(*) over (partition by comment_id) as count
            FROM report r
            JOIN comment c ON r.comment_id = c.id
            JOIN board b ON c.board_id = b.id
            JOIN user u ON u.id = b.user_id
            ORDER BY b.board_state desc
            <if test="orderBy == 'date'">
                , r.report_created_at desc

            </if>
            <if test="orderBy == 'count'">
                , count desc

            </if>
            <if test="orderBy == ''">
            </if>

            LIMIT #{offSET}, #{countPerPage}

        </if>
        <if test="type ==''">
            select * FROM report
        </if>
    </select>


    <select id="count" resultType="java.lang.Integer">

        select count(*)
        FROM report
        <if test="type == 'board'">
            WHERE report_type = '게시글'
        </if>
        <if test="type == 'comment' ">
            WHERE report_type = '댓글'
        </if>


    </select>
 <select id="countDataForLastSevenDays" resultType="com.i4.i4blog.repository.model.admin.GraphDataVO">
     SELECT CURDATE() - INTERVAL days.num DAY AS reg_date, IFNULL(COUNT(${columnName}), 0) as count
     FROM
         (SELECT 0 AS num
         UNION ALL SELECT 1
         UNION ALL SELECT 1
         UNION ALL SELECT 2
         UNION ALL SELECT 3
         UNION ALL SELECT 4
         UNION ALL SELECT 5.
         UNION ALL SELECT 6) days
         LEFT JOIN
         ${tableName}
     ON DATE (${columnName}) = CURDATE() - INTERVAL days.num DAY
     GROUP BY
         days.num
     ORDER BY
         days.num DESC
 </select>
    <select id="userMangeList" resultType="com.i4.i4blog.repository.model.admin.UserManage">
        SELECT u.id,
        u.user_id,
        u.user_nickname,
        u.user_email,
        date_format(u.user_created_at, '%Y년 %m월 %d일') as user_created_at,
        COALESCE(COUNT(DISTINCT b.id), 0) as board_count,
        COALESCE(COUNT(DISTINCT c.id), 0) as comment_count
        FROM user u
        LEFT JOIN board b ON u.id = b.user_id
        LEFT JOIN comment c on c.user_id = u.id
        <if test="keyword != null">
            WHERE u.user_nickname like concat('%',#{keyword},'%')
        </if>

        GROUP BY u.id, u.user_id, u.user_nickname, u.user_email, u.user_created_at
        <choose>
            <when test="orderBy == 'date'">
                ORDER BY u.user_created_at
            </when>
            <when test="orderBy == 'board-count'">
                ORDER BY board_count
            </when>
            <when test="orderBy == 'comment-count'">
                ORDER BY comment_count
            </when>
        </choose>

        LIMIT #{offSET}, #{countPerPage}

    </select>
    <select id="userCount" resultType="java.lang.Integer">
        SELECT count(id) FROM user
    </select>
</mapper>